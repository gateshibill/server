package com.sjy.controller;

import com.sjy.dao.*;
import com.sjy.entity.*;
import com.sjy.service.MemberRiskControlService;
import com.sjy.service.PositionOrderService;
import com.sjy.service.UserOrderMainService;
import com.sjy.service.UserService;
import com.sjy.util.DateUtil;
import com.sjy.util.MathUtils;
import com.sjy.util.Redis.RedisUtil1;
import com.sjy.util.Redis.RedisUtil2;
import net.sf.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/memberRiskControl")
public class MemberRiskControlController {

    @Autowired
    private MemberRiskControlService memberRiskControlService;
    @Autowired
    private UserService userService;
    @Autowired
    private UserOrderMainService userOrderMainService;
    @Autowired
    private UserOrderDao userOrderDao; // 明细
    @Autowired
    private UserDao userDao;
    @Autowired
    private MessageDao messageDao; // 通知信息
    @Autowired
    private FlowRecordDao flowRecordDao; // 资金明细
    @Autowired
    private PoundageDao poundageDao; // 手续费
    @Autowired
    private UserOrderMainDao userOrderMainDao; //user_order主表
    @Autowired
    private PositionOrderService positionOrderService;
    @Autowired
    private PositionOrderDao positionOrderDao;


    /**
     * 进入会员风控列表页面
     * @param model
     * @param memberRiskControl
     * @return*/

    @RequestMapping(value = "/index", method = RequestMethod.GET)
    public String index(Model model, MemberRiskControl memberRiskControl) {
        model.addAttribute("memberRiskControl", memberRiskControl);
        return "memberRiskControl/index";
    }

    /**
     * 会员风控列表页面
     *   总资产  > 亏损警戒线    ===> 会员风控列表页面
     *
     * @param response
     * @param memberRiskControlVO
     * @return*/
    @ResponseBody
    @RequestMapping(value="/getrisklist",method=RequestMethod.POST)
    public String getRiskList(HttpServletRequest request,HttpServletResponse response, MemberRiskControlVO memberRiskControlVO, Integer page, Integer limit) {
        String result=null;
        //获取当前登录admin对象
        Admin admin = (Admin) request.getSession().getAttribute("stockManageAdmin");
        if(admin.getAdminLevel() ==0){
            result = userService.getMemberRiskList(page, limit);
        }else{
            result = userService.getMemberRiskListDL(page,limit,admin.getAdminId());
        }
        return result;
    }

    /**
     * 进入预警线风控列表页面
     * @param model
     * @param memberRiskControl
     * @return*/

    @RequestMapping(value = "/warning", method = RequestMethod.GET)
    public String warningIndex(Model model, MemberRiskControl memberRiskControl) {
        model.addAttribute("memberRiskControl", memberRiskControl);
        return "memberRiskControl/warning";
    }

    /**
     * 预警线风控列表页面
     * 亏损平仓线<总资产 <  亏损警戒线    ===>  预警线风控管理列表页面
     *
     * @param response
     * @param memberRiskControlVO
     * @return*/
    @ResponseBody
    @RequestMapping(value="/getwarninglist",method=RequestMethod.POST)
    public String getWarningList(HttpServletRequest request,HttpServletResponse response, MemberRiskControlVO memberRiskControlVO, Integer page, Integer limit) {
        String result=null;
        //获取当前登录admin对象
        Admin admin = (Admin) request.getSession().getAttribute("stockManageAdmin");
        Integer adminId = admin.getAdminId();
        Integer parentId = admin.getParentId();
        //判断用户是否是超级管理员  0：超级管理员
        if(admin.getAdminLevel() ==0){
            result = userService.getWarninglList(page, limit);
        }else{
            result = userService.getWarninglListDL(page,limit,admin.getAdminId());
        }
        return result;
    }

    /**
     * 进入平仓线风控列表页面
     * @param model
     * @param memberRiskControl
     * @return*/

    @RequestMapping(value = "/unwind", method = RequestMethod.GET)
    public String unwindIndex(Model model, MemberRiskControl memberRiskControl) {
        model.addAttribute("memberRiskControl", memberRiskControl);
        return "memberRiskControl/unwind";
    }

    /**
     * 平仓线风控列表页面
     *   总资产 <  亏损平仓线  ===> 平仓线风控管理
     *
     * @param response
     * @param memberRiskControlVO
     * @return*/
    @ResponseBody
    @RequestMapping(value="/getunwindlist",method=RequestMethod.POST)
    public String getUnwindList(HttpServletRequest request,HttpServletResponse response, MemberRiskControlVO memberRiskControlVO, Integer page, Integer limit) {
        String result=null;
        //获取当前登录admin对象
        Admin admin = (Admin) request.getSession().getAttribute("stockManageAdmin");
        Integer adminId = admin.getAdminId();
        Integer parentId = admin.getParentId();
        //判断用户是否是超级管理员  0：超级管理员
        if(admin.getAdminLevel() ==0){
            result = userService.getUnwindlist(page, limit);
        }else{
            result = userService.getUnwindlistDL(page,limit,admin.getAdminId());
        }
        return result;
    }
    @ResponseBody
    @RequestMapping(value="/pc",method=RequestMethod.POST)
    public Map<String,String> pc(Integer userId){
        Map<String, String> map = new HashMap<String, String>();
        if(userId != null){
            Double sellPrice1 =0.0;   //佣金
            Double yh = 0.0;          //印花
            Double gouHu =0.0;        //过户
            List<UserOrderVO> userOrderVOS = positionOrderDao.userOrderPC(userId);
            UserOrder userOrder = new UserOrder();
            for(UserOrderVO user : userOrderVOS){
                int args = Integer.valueOf(user.getStockCode());
                String key = user.getStockCode()+":"+user.getMarket();//股票:市场  = key值
                System.out.println(key);
                String newStr = null;
                if(args % 2 == 0) { //Redis2
                    if(RedisUtil2.exists(key)) {
                        if(RedisUtil2.llen(key)>0) {
                            newStr = RedisUtil2.lindex(key, -1); // 最新
                        }
                    }
                }else { //Redis1
                    if(RedisUtil1.exists(key)) {
                        if(RedisUtil1.llen(key)>0) {
                            newStr = RedisUtil1.lindex(key, -1); // 最新
                        }
                    }
                }
                if(newStr != null) {
                    try {
                        JSONObject object = JSONObject.fromObject(newStr);
                        if(!object.get("cp").equals("") && object.get("cp") != null) {
                            String cp = object.get("cp").toString(); // 获取现价cp
                            // 卖出成功扣除(手续费 + 过户费 + 印花税)
                            // (卖出时: 佣金比例为此单的万分之二 ,佣金不足5.00 用5.00扣除 印花税 (卖出金额的千分之一))
                            sellPrice1 = MathUtils.sellPrice1(Double.valueOf(cp),
                                    Double.valueOf(user.getOrderNumber()));
                            yh = Double.valueOf(user.getOrderNumber()) * Double.valueOf(cp) * 0.001;
                            // (过户费 上证收取过户费)
                            if (user.getMarket().equals("SSE")) { // 上证收取过户费
                                gouHu = MathUtils.transferFee(Double.valueOf(user.getOrderNumber()));
                            } else {
                                gouHu = 0.00;
                            }
                            //更改userOrderMain表记录
                            UserOrderMain userOrderMainPC = userOrderMainService.getUserOrderMain(user.getStockCode(),userId);
                            userOrderMainPC.setStockNumber(0);
                            userOrderMainPC.setAllowSellNumber(0);
                            userOrderMainService.updateUserOrderMain(userOrderMainPC);
                            //插入卖出记录
                            userOrder.setMarket(user.getMarket());
                            userOrder.setCreateTime(new Date());
                            userOrder.setTradeTime(new Date());
                            userOrder.setOrderParticipationType(3); // 3 当前委托（平仓，卖出中）
                            if (DateUtil.isTradingHours() && !DateUtil.isWeekend()) {
                                userOrder.setEntrustTime(new Date());
                                userOrder.setOrderParticipationType(4); // 交易时间外，委托中
                            }
                            userOrder.setOrderPrice(Double.valueOf(object.getString("cp")));
                            userOrder.setOrderType(2); // 卖出
                            userOrder.setUserId(user.getUserId());
                            userOrder.setOrderNumber(Double.valueOf(user.getOrderNumber()));
                            userOrder.setStockCode(user.getStockCode());
                            userOrder.setStockName(user.getStockName());
                            userOrder.setOrderExitPrice(Double.valueOf(cp));
                            userOrderDao.insertUserOrder(userOrder);
                            //更改卖出信息
                            user.setIsPc(1);
                            userOrderDao.updateUserOrder(user);
                            // 6.更改用户金额
                            Double expendableFund = user.getOrderNumber() * Double.valueOf(cp)
                                    + sellPrice1 + gouHu;
                            User user1 = userDao.getUserInfoById(user.getUserId());
                            user1.setUserExpendableFund(user1.getUserExpendableFund() + expendableFund); // 用户可用资金
                            user1.setUserOpenMarketValue(user1.getUserOpenMarketValue()
                                    - (user.getOrderNumber() * Double.valueOf(cp)));// 减去持仓市值
                            user1.setUserNetAsset(user1.getUserNetAsset() - sellPrice1 - gouHu);// 用户总资产
                            user1.setUserMoney(user1.getUserMoney() - sellPrice1 - gouHu);
                            userDao.updateUser(user1);
                            // 7.插入流水记录 : 后续优化 、扣除手续费 后续优化 ;、扣除手续费 后续优化 ;
                            FlowRecord flowRecord = new FlowRecord();
                            flowRecord.setUserId(user.getUserId());
                            flowRecord.setFlowNumber(user.getOrderNumber() * Double.valueOf(cp));
                            flowRecord.setFlowWay(2);
                            flowRecord.setFlowType(1);
                            flowRecord.setAfterMoney(user1.getUserExpendableFund());
                            flowRecord.setCreateTime(new Date());
                            flowRecordDao.addFlowRecord(flowRecord);
                            // 保证金放入资金明细表中
                            FlowRecord flowRecord1 = new FlowRecord();
                            flowRecord1.setUserId(user.getUserId());
                            flowRecord1.setFlowNumber(sellPrice1 + gouHu);
                            flowRecord1.setFlowWay(1);
                            flowRecord1.setFlowType(2);
                            flowRecord1.setAfterMoney(user1.getUserMoney());
                            flowRecord1.setCreateTime(new Date());
                            flowRecordDao.addFlowRecord(flowRecord1);
                            // 手续费放入资金明细表中
                            FlowRecord flowRecord2 = new FlowRecord();
                            flowRecord2.setUserId(user.getUserId());
                            flowRecord2.setFlowNumber(sellPrice1 + gouHu);
                            flowRecord2.setFlowWay(6);
                            flowRecord2.setFlowType(2);
                            flowRecord2.setAfterMoney(user1.getUserMoney());
                            flowRecord2.setCreateTime(new Date());
                            flowRecordDao.addFlowRecord(flowRecord2);
                            // 8委托卖出成功后,把消息推送给用户
                            Message message = new Message();
                            message.setUserId(user.getUserId());
                            message.setMessageTitle("系统消息");
                            message.setMessageContent("已平仓卖出成功");
                            message.setMessageName("");
                            message.setMessageType(1);
                            message.setMessageState(1);
                            message.setCreateTime(new Date());
                            messageDao.addMessage(message);
                            // 9把卖出的数据插入手续费统计列表中
                            Poundage poundage = new Poundage();
                            poundage.setOrderNumber(user.getOrderId());
                            poundage.setUserId(user.getUserId());
                            poundage.setStockName(user.getStockName());
                            poundage.setStockCode(user.getStockCode());
                            poundage.setTurnover(Double.valueOf(user.getOrderNumber()));
                            poundage.setSellPrice(Double.valueOf(cp));
                            poundage.setMoney(Double.valueOf(user.getOrderNumber()) * Double.valueOf(cp));
                            poundage.setTransfer(gouHu);
                            poundage.setPrinting(yh);
                            poundage.setCommission(sellPrice1 - yh);
                            poundage.setPoundagePrice(sellPrice1);
                            poundage.setChargePrice(0.00); // 服务中心
                            poundage.setAdminId(user1.getInviterId());
                            poundage.setAdminChargePrice(0.00); // 代理商收取费用 优化
                            poundage.setDealFlag("2");
                            poundage.setDealTime(new Date());
                            poundageDao.addPoundage(poundage);
                            map.put("msg","success");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
                    }
                }
            }
        }else{
            map.put("msg","error");
        }
        return map;
    }

}
